[
  {
    "id": 74,
    "link": "https://github.com/PaperMC/Paper/pull/11683",
    "name": "Deprecate ChatVisibility#UNKNOWN",
    "deprecations": ["ClientOption.UNKNOWN"]
  },
  {
    "id": 69,
    "link": "https://github.com/PaperMC/Paper-Archive/commit/5f6a79668c98f9b3feffc83705a462766536b238",
    "name": "deprecate adventure key() methods where applicable",
    "deprecations": [
      "Art#key(): Key",
      "MusicInstrument#key(): Key",
      "Sound#key(): Key",
      "PatternType#key(): Key",
      "PatternType#getKey(): NamespacedKey",
      "Structure#key(): Key",
      "TrimMaterial#key(): Key",
      "TrimPattern#key(): Key"
    ]
  },
  {
    "id": 64,
    "link": "https://github.com/PaperMC/Paper/pull/11573",
    "name": "Expose particle status client option",
    "additions": [
      "ClientOption.PARTICLE_VISIBILITY: ClientOption<ParticleVisibility>",
      "PlayerClientOptionsChangeEvent#getParticleVisibility(): ParticleVisibility",
      "PlayerClientOptionsChangeEvent#hasParticleVisibilityChanged(): boolean"
    ]
  },
  {
    "id": 63,
    "link": "https://github.com/PaperMC/Paper-Archive/commit/4190ee7439204c958e0fb9d013a34233e92fd870",
    "name": "Add Server#isGlobalTickThread",
    "additions": [
      "Bukkit.isOwnedByCurrentRegion(World world, int minChunkX, int minChunkZ, int maxChunkX, int maxChunkZ): boolean",
      "Bukkit.isGlobalTickThread(): boolean",
      "Server#isOwnedByCurrentRegion(World world, int minChunkX, int minChunkZ, int maxChunkX, int maxChunkZ): boolean",
      "Server#isGlobalTickThread(): boolean"
    ]
  },
  {
    "id": 60,
    "link": "https://github.com/PaperMC/Paper/pull/11661",
    "name": "Add all missing TagKey constants files",
    "additions": [
      "BannerPatternTagKeys",
      "BiomeTagKeys",
      "BlockTypeTagKeys",
      "CatVariantTagKeys",
      "DamageTypeTagKeys",
      "FluidTagKeys",
      "GameEventTagKeys",
      "InstrumentTagKeys",
      "PaintingVariantTagKeys",
      "StructureTagKeys"
    ]
  },
  {
    "id": 56,
    "link": "https://github.com/PaperMC/Paper/pull/11648",
    "name": "Painting variant registry modification API",
    "additions": [
      "PaintingVariantRegistryEntry",
      "RegistryEvents.PAINTING_VARIANT: RegistryEventProvider<Art, PaintingVariantRegistryEntry.Builder>",
      "Art#title(): Component",
      "Art#author(): Component",
      "Art#assetId(): Key"
    ]
  },
  {
    "id": 51,
    "link": "https://github.com/PaperMC/Paper/pull/11641",
    "name": "Make TypedKey an actual Key",
    "extensions": ["`TypedKey<T>` now extends `Key` (extended `Keyed` before)"]
  },
  {
    "id": 48,
    "link": "https://github.com/PaperMC/paper/issues/11611",
    "name": "Add API to allow/disallow tick sleeping",
    "additions": ["Server#allowPausing(Plugin plugin, boolean value)"]
  },
  {
    "id": 47,
    "link": "https://github.com/PaperMC/Paper/pull/11605",
    "name": "Added API to check if the server is sleeping",
    "additions": ["Server#isPaused(): boolean"]
  },
  {
    "id": 42,
    "link": "https://github.com/PaperMC/Paper/pull/11625",
    "name": "Add PlayerItemGroupCooldownEvent",
    "renamed": ["`PlayerItemCooldownEvent` to `PlayerItemGroupCooldownEvent`"],
    "additions": [
      "PlayerItemCooldownEvent extends PlayerItemGroupCooldownEvent"
    ]
  },
  {
    "id": 38,
    "link": "https://github.com/PaperMC/Paper/pull/10845",
    "name": "Item datacomponent api",
    "extra": "*The contents of this PR have been documented in the Paper docs: [Data Component API](https://docs.papermc.io/paper/dev/data-component-api).*",
    "additions": [
      "BlockPredicate",
      "BuildableDataComponent<C extends BuildableDataComponent<C, B>, B extends DataComponentBuilder<C>>",
      "DataComponentBuilder<C>",
      "DataComponentType",
      "DataComponentTypes",
      "BannerPatternLayers",
      "BlockItemDataProperties",
      "BundleContents",
      "ChargedProjectiles",
      "Consumable extends BuildableDataComponent<Consumable, Consumable.Builder>",
      "CustomModelData",
      "DamageResistant",
      "DeathProtection",
      "DyedItemColor extends ShownInTooltip<DyedItemColor>",
      "Enchantable",
      "Equippable extends BuildableDataComponent<Equippable, Equippable.Builder>",
      "Fireworks",
      "FoodProperties extends BuildableDataComponent<FoodProperties, FoodProperties.Builder>",
      "ItemAdventurePredicate extends ShownInTooltip<ItemAdventurePredicate>",
      "ItemArmorTrim extends ShownInTooltip<ItemArmorTrim>",
      "ItemAttributeModifiers extends ShownInTooltip<ItemAttributeModifiers>",
      "ItemComponentTypesBridge",
      "ItemContainerContents",
      "ItemEnchantments extends ShownInTooltip<ItemEnchantments>",
      "ItemLore",
      "JukeboxPlayable extends ShownInTooltip<JukeboxPlayable>",
      "LodestoneTracker",
      "MapDecorations",
      "MapId",
      "MapItemColor",
      "OminousBottleAmplifier",
      "PotDecorations",
      "PotionContents",
      "Repairable",
      "ResolvableProfile",
      "SeededContainerLoot",
      "ShownInTooltip<T>",
      "SuspiciousStewEffects",
      "Tool",
      "Unbreakable extends ShownInTooltip<Unbreakable>",
      "UseCooldown",
      "UseRemainder",
      "WritableBookContent",
      "WrittenBookContent",
      "ConsumeEffect",
      "ItemUseAnimation",
      "MapPostProcessing",
      "Filtered<T>",
      "Material#getDefaultData(DataComponentType.Value<T> type): T",
      "Material#hasDefaultData(DataComponentType type): boolean",
      "Material#getDefaultDataTypes(): Set<DataComponentType>",
      "ItemStack#getData(DataComponentType.Value<T> type): T",
      "ItemStack#getDataOrDefault(DataComponentType.Value<T> type, T fallback): T",
      "ItemStack#hasData(DataComponentType type): boolean",
      "ItemStack#getDataTypes(): Set<DataComponentType>",
      "ItemStack#setData(DataComponentType.Valued<T> type, DataComponentBuilder<T> valueBuilder)",
      "ItemStack#setData(DataComponentType.Valued<T>, T value)",
      "ItemStack#setData(DataComponentType.NonValued)",
      "ItemStack#unsetData(DataComponentType)",
      "ItemStack#resetData(DataComponentType)",
      "ItemStack#isDataOverridden(DataComponentType): boolean",
      "ItemStack#matchesWithoutData(ItemStack, Set<DataComponentType> excludeTypes): boolean",
      "ItemStack#matchesWithoutData(ItemStack, Set<DataComponentType> excludeTypes, boolean ignoreCount): boolean",
      "ItemStack#editData(DataComponentType.Valued<T> type, Function<T, T>)",
      "Registry.DATA_COMPONENT_TYPE: Registry<DataComponentType>",
      "RegistryKey.DATA_COMPONENT_TYPE: RegistryKey<DataComponentType>",
      "ItemType#getDefaultData(DataComponentType.Valued<T> type): T",
      "ItemType#hasDefaultData(DataComponentType type): boolean",
      "ItemType#getDefaultDataTypes(): Set<DataComponentType>"
    ],
    "noInternal": ["BlockType"]
  }
]
