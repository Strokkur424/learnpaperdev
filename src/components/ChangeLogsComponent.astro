---
import type { ChangeLogs, SidebarsProps, VersionTemplate } from "./ChangeLogs.tsx";
import { getChangeLogs } from "./ChangeLogs.tsx";

import StarlightPage from "@astrojs/starlight/components/StarlightPage.astro";
import { marked } from "marked";

const { version_id, next, prev } = Astro.props;
const changeLogs: ChangeLogs  = getChangeLogs(version_id);
---

<StarlightPage headings={changeLogs.headings} frontmatter={{ title: "API Changelogs", slug: "/changelogs/" + version_id + "/", next: next, prev: prev}}>
{
    <details>
        <summary>All API Changes</summary>
              {
                  changeLogs.flatAdditions.length == 0 ? "" : (
                      <details>
                          <summary>All API Additions</summary>
                          {changeLogs.flatAdditions.map(e => <li><code>{e}</code></li>)}
                      </details>
                  )
              }
              {
                  changeLogs.flatDeprecations.length == 0 ? "" : (
                      <details>
                          <summary>All API Deprecations</summary>
                          {changeLogs.flatDeprecations.map(e => <li><code>{e}</code></li>)}
                      </details>
                  )
              }
              {
                  changeLogs.flatExtensions.length == 0 ? "" : (
                      <details>
                          <summary>All Class Inheritance Changes</summary>
                          {changeLogs.flatExtensions.map(e => <li set:html={marked.parseInline(e)}></li>)}
                      </details>
                  )
              }
              {
                  changeLogs.flatRemoved.length == 0 ? "" : (
                      <details>
                          <summary>All API Removals</summary>
                          {changeLogs.flatRemoved.map(e => <li><code>{e}</code></li>)}
                      </details>
                  )
              }
              {
                  changeLogs.flatRenamed.length == 0 ? "" : (
                      <details>
                          <summary>All Renamed Classes</summary>
                          {changeLogs.flatRenamed.map(e => <li set:html={marked.parseInline(e)}></li>)}
                      </details>
                  )
              }
              {
                  changeLogs.flatNoInternal.length == 0 ? "" : (
                      <details>
                          <summary>No Longer Internal</summary>
                          {changeLogs.flatNoInternal.map(e => <li><code>{e}</code></li>)}
                      </details>
                  )
              }
    </details>
}
{
    changeLogs.data.map((e) => (
        <p>
            <h2>
                <a href={e.link}>
                    <code>#{e.id}</code>
                </a>{" "}
                {e.name}
            </h2>
            {e.extra == null ?  "" : <p set:html={marked.parseInline(e.extra)}/>}
            {e.additions == null ? (
                ""
            ) : (
                <p>Additions:</p>
                <ul>
                    {e.additions.map((add) => (
                        <li><code>{add}</code></li>
                    ))}
                </ul>
            )}
            {e.deprecations == null ? (
                ""
            ) : (
                <p>Deprecations:</p>
                <ul>
                    {e.deprecations.map((dep) => (
                        <li><code>{dep}</code></li>
                    ))}
                </ul>
            )}
            {e.extensions == null ? (
                ""
            ) : (
                <p>Extensions:</p>
                <ul>
                    {e.extensions.map((ext) => (
                        <li set:html={marked.parseInline(ext)}></li>
                    ))}
                </ul>
            )}
            {e.removed == null ? (
                ""
            ) : (
                <p>Removed:</p>
                <ul>
                    {e.removed.map((rem) => (
                        <li><code>{rem}</code></li>
                    ))}
                </ul>
            )}
            {e.renamed == null ? (
                ""
            ) : (
                <p>Renamed:</p>
                <ul>
                    {e.renamed.map((ren) => (
                        <li set:html={marked.parseInline(ren)}></li>
                    ))}
                </ul>
            )}
            {e.noInternal == null ? (
                ""
            ) : (
                <p>No longer internal:</p>
                <ul>
                    {e.noInternal.map((noi) => (
                        <li><code>{noi}</code></li>
                    ))}
                </ul>
            )}
        </p>
    ))
}
</StarlightPage>
