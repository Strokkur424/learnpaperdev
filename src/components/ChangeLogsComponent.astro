---
import { type ChangeLogs, getChangeLogs } from "./ChangeLogs.ts";

import StarlightPage from "@astrojs/starlight/components/StarlightPage.astro";
import { marked } from "marked";

const { version_id, next, prev } = Astro.props;
const changeLogs: ChangeLogs = getChangeLogs(version_id);
---

<StarlightPage
  headings={changeLogs.headings}
  frontmatter={{
    title: "API Changes in " + version_id,
    slug: "/changelogs/" + version_id + "/",
    next: next,
    prev: prev,
  }}
>
  {
    (
      <details>
        <summary>All API Changes</summary>
        {changeLogs.flatAdditions.length == 0 ? (
          ""
        ) : (
          <details>
            <summary>All API Additions</summary>
            {changeLogs.flatAdditions.map((e) => (
              <li>
                <code>{e}</code>
              </li>
            ))}
          </details>
        )}
        {changeLogs.flatDeprecations.length == 0 ? (
          ""
        ) : (
          <details>
            <summary>All API Deprecations</summary>
            {changeLogs.flatDeprecations.map((e) => (
              <li>
                <code>{e}</code>
              </li>
            ))}
          </details>
        )}
        {changeLogs.flatExtensions.length == 0 ? (
          ""
        ) : (
          <details>
            <summary>All Class Inheritance Changes</summary>
            {changeLogs.flatExtensions.map((e) => (
              <li set:html={marked.parseInline(e)} />
            ))}
          </details>
        )}
        {changeLogs.flatRemoved.length == 0 ? (
          ""
        ) : (
          <details>
            <summary>All API Removals</summary>
            {changeLogs.flatRemoved.map((e) => (
              <li>
                <code>{e}</code>
              </li>
            ))}
          </details>
        )}
        {changeLogs.flatObsolete.length == 0 ? (
          ""
        ) : (
          <details>
            <summary>Now Obsolete</summary>
            {changeLogs.flatObsolete.map((e) => (
              <li>
                <code>{e}</code>
              </li>
            ))}
          </details>
        )}
        {changeLogs.flatRenamed.length == 0 ? (
          ""
        ) : (
          <details>
            <summary>All Renamed Classes</summary>
            {changeLogs.flatRenamed.map((e) => (
              <li set:html={marked.parseInline(e)} />
            ))}
          </details>
        )}
        {changeLogs.flatNoInternal.length == 0 ? (
          ""
        ) : (
          <details>
            <summary>No Longer Internal</summary>
            {changeLogs.flatNoInternal.map((e) => (
              <li>
                <code>{e}</code>
              </li>
            ))}
          </details>
        )}
        {changeLogs.flatLibraries.length == 0 ? (
          ""
        ) : (
          <details>
            <summary>Library Changes</summary>
            {changeLogs.flatLibraries.map((e) => (
              <li set:html={marked.parseInline(e)} />
            ))}
          </details>
        )}
      </details>
    )
  }
  {
    changeLogs.data.map((e) => (
      <p>
        <h2 id={`${e.id}`}>
          <a href={e.link}>
            <code>#{e.id}</code>
          </a>{" "}
          {e.name}
        </h2>
        {e.extra == null ? "" : <p set:html={marked.parseInline(e.extra)} />}
        {e.additions == null ? (
          ""
        ) : (
          <div>
            <p>Additions:</p>
            <ul>
              {e.additions.map((add) => (
                <li>
                  <code>{add}</code>
                </li>
              ))}
            </ul>
          </div>
        )}
        {e.deprecations == null ? (
          ""
        ) : (
          <div>
            <p>Deprecations:</p>
            <ul>
              {e.deprecations.map((dep) => (
                <li>
                  <code>{dep}</code>
                </li>
              ))}
            </ul>
          </div>
        )}
        {e.extensions == null ? (
          ""
        ) : (
          <div>
            <p>Extensions:</p>
            <ul>
              {e.extensions.map((ext) => (
                <li set:html={marked.parseInline(ext)} />
              ))}
            </ul>
          </div>
        )}
        {e.removed == null ? (
          ""
        ) : (
          <div>
            <p>Removed:</p>
            <ul>
              {e.removed.map((rem) => (
                <li>
                  <code>{rem}</code>
                </li>
              ))}
            </ul>
          </div>
        )}
        {e.obsolete == null ? (
          ""
        ) : (
          <div>
            <p>Obsolete API:</p>
            <ul>
              {e.obsolete.map((obs) => (
                <li>
                  <code>{obs}</code>
                </li>
              ))}
            </ul>
          </div>
        )}
        {e.renamed == null ? (
          ""
        ) : (
          <div>
            <p>Renamed:</p>
            <ul>
              {e.renamed.map((ren) => (
                <li set:html={marked.parseInline(ren)} />
              ))}
            </ul>
          </div>
        )}
        {e.noInternal == null ? (
          ""
        ) : (
          <div>
            <p>No longer internal:</p>
            <ul>
              {e.noInternal.map((noi) => (
                <li>
                  <code>{noi}</code>
                </li>
              ))}
            </ul>
          </div>
        )}
        {e.libraries == null ? (
          ""
        ) : (
          <div>
            <p>Libraries:</p>
            <ul>
              {e.libraries.map((lib) => (
                <li set:html={marked.parseInline(lib)} />
              ))}
            </ul>
          </div>
        )}
      </p>
    ))
  }
</StarlightPage>
